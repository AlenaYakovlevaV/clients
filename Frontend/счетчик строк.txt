<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Клиенты</title>
    <!-- <link rel="stylesheet" href="./css/normalize.css"> -->
    <link rel="stylesheet" href="./css/style.css">
</head>
<body>
    
    <script type="module" defer src="./js/index.js"></script>
</body>
</html>
.clients__table {
    width: 100%;
    margin-bottom: 40px;
}

.client__item {
    display: flex;
    padding: 20px;
    border-bottom: 1px solid rgb(200, 197, 209, .5);;
    background-color: var(--color-white);
}

.client__id {
    display: flex;
    width: 7%;
    align-items: center;
    font-size: 12px;
    color: var(--color-grey);
}

.client__fio {
    width: calc(32% + 5px);
    font-size: 14px;
    color: var(--color-mine-shaft);
}

.client__fio span {
    display: inline-block;
}

.client__fio span:not(:last-child) {
    margin-right: 4px;
}

.client__create {
    padding-left: 10px;
    width: calc(15%);
}

.client__update {
    padding-left: 23px;
    width: calc(15%);
}

.create__date,
.update__date {
    margin-right: 7px;
    font-size: 14px;
    color: var(--color-mine-shaft);
}

.create__time,
.update__time {
    font-size: 14px;
    color: var(--color-grey);
}

.client__contacts {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    margin: -10px 30px -10px 30px;
    max-width: 120px;
    min-width: 120px;
}

.client__actions {
    display: flex;
    align-items: center;
    background-color: transparent;
}

.client__actions button {
    display: inline-block;
    font-size: 14px;
    background-repeat: no-repeat;
    background-position: left top; /*left center*/
    background-color: transparent;
    padding-left: 16px;
    color: var(--color-mine-shaft);
}

.client__change {
    position: relative;
    margin-right: 30px;
    background-image: url('./img/edit.svg');
    transition: color .3s ease-in-out;
}

.client__delete {
    position: relative;
    background-image: url('./img/cancel.svg');
    transition: color .3s ease-in-out;
}

.client__change:hover {
    color: var(--color-heliotrope);
    transition: color .3s ease-in-out;
}

.client__delete:hover {
    color: var(--color-burnt-sienna);
    transition: color .3s ease-in-out;
}

.contacts__link {
    /* display: inline-block; */
    position: relative;
    width: 16px;
    height: 16px;
    /* margin-bottom: 7px; */
}

.contacts__link g,
.contacts__link svg {
    transition: opacity .3s ease-in-out;
}

.contacts__link:hover g,
.contacts__link:hover svg {
    opacity: 1;
    transition: opacity .3s ease-in-out;
}

.contacts__link:not(:last-child) {
    margin-right: 7px;
}

.actions__spinner {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    animation: spinner .3s ease-in-out;
    animation-duration: 1s;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
}

.action-wait {
    background-image: none;
}

.client__change .actions__spinner svg {
    stroke: var(--color-heliotrope);
    fill: none;
}

.client__delete .actions__spinner svg {
    stroke: var(--color-burnt-sienna);
    fill: none;
}

@keyframes spinner {
    0%{
        transform: rotate(0deg);
    }
    100%{
        transform: rotate(360deg);
    }
}
.clients {
    padding-top: 130px;
}

.clients__heading {
    margin: 0;
    margin-bottom: 26px; /*10px*/
    font-size: 24px;
    font-weight: bold;
    color: var(--color-mine-shaft);
}

.clients__container {
    display: flex;
    flex-direction: column;
}

.thead-info {
    padding-left: 20px;
    margin-bottom: 8px;
    display: block;
}

.thead-info__wrapper {
    display: flex;
    align-items: center;
}

.thead-info__item {
    font-size: 12px;
    color: var(--color-grey);
}

.thead-info__item--id, .thead-info__span {
    color: var(--color-heliotrope);
}

.thead-info__item--id,
.thead-info__item--fio,
.thead-info__item--create,
.thead-info__item--update {
    cursor: pointer;
    user-select: none;
}

.thead-info__item--id {
    padding-right: 12px;
    margin-right: 45px; /*35px*/
    background-position: right center;
}

.thead-info__item--fio {
    padding-left: 45px; /*padding-left*/
    /*width: calc(32% + 5px); ПРОВЕРИТЬ*/
    /* margin-right: 100px;               ВЕРНУТЬСЯ!!!!!!!!!!*/
    background-position: right 17px center; /*right 12px center*/
}

.thead-info__span {
    padding-left: 12px;
    font-size: 10px;
    font-weight: 600;
}

.thead-info__item--create {
    position: relative;
    padding-right: 70px;
    padding-left: 188px;
}

.thead-info__item--create::before {
    content: 'создания';
    position: absolute;
    right: 0;
    top: 1px; /*0*/
    margin-right: 12px;
}


.thead-info__item--update {
    position: relative;
    padding-right: 80px;
    margin-right: 28px;
    padding-left: 23px;
}

.thead-info__item--update::before {
    content: 'изменения';
    position: absolute;
    right: 0;
    top: 1px; /*0*/
    margin-right: 13px;
}

.clients__table {
    position: relative;
}

.thead-info__item--contacts {
    /* padding-left: 30px; */
    padding-left: 21px;
    max-width: 50px;
}

.thead-info__item--actions {
    padding-left: 121px;
}

.clients__tbody {
    position: relative;
}

.clients__btn {
    display: flex;
    flex-direction: row-reverse;
    padding: 12.5px 26.5px;
    align-self: center;
    /* width: 216px; */
    font-size: 14px;
    font-weight: 600;
    border: 1px solid var(--color-heliotrope);
    color: var(--color-heliotrope);
}

.clients__btn svg {
    display: block;
    margin-right: 10px;
    transition: fill .2s ease-out;
    fill: var(--color-heliotrope);
}

.clients__btn:hover {
    transition: color .3s ease-in-out, background-color .3s ease-in-out;
    background-color: var(--color-melrose);
    color: var(--color-white);
}

.clients__btn:hover svg {
    transition: fill .2s ease-in;
    fill: var(--color-white);
}

.create__span, .update__span {
    display: inline-block;
    width: 12px;
    height: 100%;
    position: absolute;
    right: 0;
    top: 0;
    background-image: url('./img/arrow_down.svg');
    background-repeat: no-repeat;
    background-position: center center;
}

.sort-up, .sort-down {
    background-repeat: no-repeat;
}

.sort-up {
    background-image: url('./img/arrow_up.svg');
}

.sort-down {
    background-image: url('./img/arrow_down.svg');
}

.thead-info__item--create,
.thead-info__item--update {
    background-image: none;
}
.contact {
    display: flex;
    align-items: center;
    width: 390px;
    margin-bottom: 25px;

}

.contact__type {
    position: relative;
}

.contact__name {
    height: 37px;
    z-index: 1;
    max-width: 123px;
    min-width: 123px;
    position: relative;
    cursor: pointer;
    transition: background-color .3s ease-in-out;
    padding: 10px 12px;
    padding-right: 60px;
    display: flex;
    align-items: center;
    color: var(--color-mine-shaft);
    border: 1px solid var(--color-gray-suit);
    background-color: var(--color-mischka);
}

.contact__name::before {
    content: '';
    position: absolute;
    top: 14px;
    right: 8px;
    width: 12px;
    height: 12px;
    background-image: url('./img/contact-arrow.svg');
    background-repeat: no-repeat;
    background-position: center center;
    transition: transform .3s ease-in-out;
}

.contact__list--active.contact__name::before {
    transform: rotate(-180deg);
    transition: transform .3s ease-in-out;
}

.contact__name:hover {
    /* background-color: var(--color-gray-suit); */
    background-color: rgba(200, 197, 209, .5);;
    transition: background-color .3s ease-in-out;
}

.contact__name:active {
    /* background-color: var(--color-gray-suit); */
    background-color: var(--color-gray-suit);
    transition: background-color .3s ease-in-out;
}

.contact__list {
    z-index: 2;
    position: absolute;
    font-size: 12px;
    /* padding: 0; */
    width: 100%;
    min-width: 123px;
    max-width: 123px;
    top: 36px;
    left: 0;
    opacity: 0;
    visibility: hidden;
    transition: opacity .3s ease-in-out, visibility .3s ease-in-out;
    border: 1px solid var(--color-gray-suit);
    background-color: var(--color-athens-gray);
}

.contact__list.contact__list--active {
    opacity: 1;
    visibility: visible;
    transition: opacity .3s ease-in-out, visibility .3s ease-in-out; /*!!!!!!!!!!!*/
}

.contact__item {
    cursor: pointer;
    padding: 10px 12px 5px 12px;
    transition: background-color .3s ease-in-out;
}

.contact__item:hover {
    background-color: rgba(231, 229, 235, .5);
    transition: background-color .3s ease-in-out;
}

.contact__input {
    display: block;
    /* padding-top: 8px;  */
    padding-left: 12px;
    /* padding-bottom: 8px; */
    width: 100%;
    height: 37px;
    border: 1px solid var(--color-gray-suit);
    border-left: none;
    border-right: none;
    background-color: transparent;
}

.contact__delete {
    display: flex;
    cursor: pointer;
    position: relative;
    align-items: center;
    align-self: stretch;
    justify-content: center;
    width: 43px;
    height: 37px;
    border: 1px solid var(--color-gray-suit);
    background-color: var(--color-mischka);
    transition: border-color .3s ease-in-out;
    color: var(--color-white);
}

.contact__delete svg {
    display: block;
    width: 16px;
    height: 16px;
    fill: var(--color-grey);
    transition: fill .3s ease-in-out;
}

.contact__delete:hover {
    border-color: var(--color-burnt-sienna);
    transition: border-color .3s ease-in-out;
}

.contact__delete:hover svg {
    fill: var(--color-burnt-sienna);
    transition: fill .3s ease-in-out;
}

.contact__delete:hover .contact-tooltip {
    opacity: 1;
    visibility: visible;
    transition: opacity .3s ease-in-out, visibility .3s ease-in-out;
}
.delete-modal__content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.delete-modal__title {
    margin-bottom: 11px;
}

.delete-modal__text {
    margin: 0;
    margin-bottom: 25px;
    font-size: 14px;
    text-align: center;
    max-width: 275px;
    color: var(--color-mine-shaft);
}

.delete-modal__delete,
.delete-modal__back {
    display: block;
}

.delete-modal__delete {
    position: relative;
    padding: 17px 35px;
    align-self: center;
    margin-bottom: 5px;
}

.delete-modal__back {
    font-weight: normal;
    align-self: center;
    padding-bottom: 1px;
    /* text-decoration: underline; */
    border-bottom: 1px solid var(--color-mine-shaft);
    color: var(--color-mine-shaft);
}
.header {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    box-shadow: 0px 3.3862948417663574px 5.643825054168701px 0px rgba(176, 190, 197, 0.32), 0px 9.030119895935059px 27.09035873413086px 0px rgba(176, 190, 197, 0.32);
    background-color: var(--color-white);
}

.header__container {
    padding: 20px;
    max-width: 1366px;
    display: flex;
    align-items: center;
}

.header__logo {
    display: block;
    margin-right: 53px;
}

.header__form {
    width: 100%;
}

.header__input {
    height: 44px;
    width: 100%;
    max-width: 581px;
    padding: 12px 16px;
    border: 1px solid rgba(51, 51, 51, 0.20);;
}

.header__input::placeholder {
    color: var(--color-grey);
    font-size: 14px;
}
.modal-active {
    animation: fade .3s ease-in-out .3s forwards;
}

@keyframes fade {
    0% {
        opacity: 0;
    }
    50% {
        opacity: .5;
    }
    100% {
        opacity: 1;
    }
}

.modal__close {
    position: absolute;
    right: 15px;
    top: 15px;
    width: 30px;
    height: 30px;
    background-image: url('./img/cross.svg');
    background-repeat: no-repeat;
    background-position: center center;
}

.modal__title {
    margin: 0;
    margin-bottom: 32px;
    font-size: 18px;
    font-weight: bold;
    color: var(--color-mine-shaft);
}

.modal__form {
    width: 390px;
    display: flex;
    flex-direction: column;
}

.form-floating {
    position: relative;
    margin-bottom: 32px;
}

.form-floating > label {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    font-size: 14px;
    padding-top: 3px;
    pointer-events: none;
    border: 1px solid transparent;
    transform-origin: 0 0;
    transition: opacity .1s ease-in-out, transform .1s ease-in-out;
    color: var(--color-grey);
}

.form-floating > .modal__input:focus~label,
.form-floating > .modal__input:not(:placeholder-shown)~label {
    top: -10px;
    transform: scale(.85) translate(.15rem, -.5rem);
}

.modal__input::placeholder {
    font-size: 0;
}

.modal__input {
    display: block;
    outline: none;
    width: 100%;
    border: none;
    height: 25px;
    border-bottom: 1px solid var(--color-gray-suit);
}

.modal__form button {
    /* font-family: inherit; */
    font-family: 'Open Sans', sans-serif;
    /* font-size: 14px;
    font-weight: 600; */
}

.modal__contact {
    padding: 8px 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: 0 -30px;
    margin-bottom: 25px;
    background-color: rgba(200, 197, 209, .3);
}

.modal__btn-contact {
    border: none;
    cursor: pointer;
    display: none;
    position: relative;
    padding-left: 17px;
    flex-direction: row-reverse;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    /* padding: 17px 35px; */
    transition: color .3s ease-in-out;
    background-color: transparent;
    color: var(--color-mine-shaft);
}

.modal__btn-contact:hover {
    color: var(--color-heliotrope);
    transition: color .3s ease-in-out;
}

.modal__btn-contact.modal__btn-contact--active {
    display: flex;
}

.btn-contact__svg {
    display: block;
    position: absolute;
    top: 2px;
    left: 0;
    margin-right: 4px;
    width: 16px;
    height: 16px;
    fill: var(--color-heliotrope);
}

.btn-contact__svg--hover,
.btn-contact__svg--default {
    opacity: 0;
    visibility: hidden;
    transform: opacity .3s ease-in-out, visibility .3s ease-in-out;
}

.btn-contact__svg--hover.btn-contact__svg--active {
    opacity: 1;
    visibility: visible;
    transition: opacity .3s ease-in-out, visibility .3s ease-in-out;
}

.btn-contact__svg--default.btn-contact__svg--active {
    opacity: 1;
    visibility: visible;
    transition: opacity .3s ease-in-out, visibility .3s ease-in-out;
}

.modal__btn-save {
    padding: 17px 35px;
    align-self: center;
    position: relative;
    margin-bottom: 5px;
    font-weight: 600;
    color: var(--color-white);
    background-color: var(--color-heliotrope);
    transition: background-color .3s ease-in-out;
}

.modal__btn-save:hover {
    background-color: var(--color-melrose);
    transition: background-color .3s ease-in-out;
}

.modal__btn-cancel {
    font-size: 12px;
    font-weight: 400;
    align-self: center;
    padding-bottom: 1px;
    color: var(--color-mine-shaft);
    /* text-decoration-line: underline; */
    border-bottom: 1px solid var(--color-mine-shaft);
}

.modal__btn-cancel:hover {
    font-weight: 600;
    /* text-decoration-line: none; */
    /* border: none; */
}

.modal__label > span {
    color: var(--color-heliotrope);
}

.modal__id {
    display: inline-block;
    margin-left: 9px;
    font-size: 12px;
    font-weight: normal;
    color: var(--color-grey);
}

.modal__error {
    display: flex;
    margin: -17px 0 9px 0;
    align-self: center;
    text-align: center;
    /* align-items: center; */
    max-width: 255px;
    /* min-width: auto; */
    font-size: 10px;
    color: var(--color-burnt-sienna);
}

.modal__spinner {
    position: absolute;
    display: none;
    top: 16px;
    left: 13px;
    animation: spinner .3s ease-in-out;
    animation-duration: 1s;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
}

.modal__spinner svg {
    width: 15px;
    height: 15px;
    stroke: var(--color-white);
    fill: none;
}

@keyframes spinner {
    0%{
        transform: rotate(0deg);
    }
    100%{
        transform: rotate(360deg);
    }
}
.preloader {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
    top: 0;
    left: 0;
    height: 300px;
    width: 100%;
    background-color: var(--color-white);
  }
  
  #loader {
    --front-color: #8052ff;
    width: 45px;
    height: 45px;
    border-radius: 50px;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  #loader svg {
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  #loader svg circle {
    position: absolute;
    fill: none;
    stroke-width: 4px;
    stroke-linecap: round;
    stroke-linejoin: round;
    transform: rotate(-100deg);
    transform-origin: center;
  }
  
  #loader svg circle.front {
    stroke: var(--front-color);
  }
  
  #loader svg.circle-inner {
    height: 50px;
    width: 40px;
  }
  #loader svg.circle-inner circle {
    stroke-dasharray: 22 66;
  }
  
  #loader svg.circle-inner circle.front {
    -webkit-animation: circle-inner 1.8s ease infinite 0.05s;
            animation: circle-inner 1.8s ease infinite 0.05s;
  }
 
  @-webkit-keyframes circle-inner {
    0% {
      stroke-dashoffset: 9;
    }
    25% {
      stroke-dashoffset: 0;
    }
    65% {
      stroke-dashoffset: 106;
    }
    80% {
      stroke-dashoffset: 97;
    }
    100% {
      stroke-dashoffset: 97;
    }
  }
  @keyframes circle-inner {
    0% {
      stroke-dashoffset: 9;
    }
    25% {
      stroke-dashoffset: 0;
    }
    65% {
      stroke-dashoffset: 106;
    }
    80% {
      stroke-dashoffset: 97;
    }
    100% {
      stroke-dashoffset: 97;
    }
  }
/* fonts */
@font-face {
    font-family: 'Open Sans';  
    src: url('fonts/OpenSansRegular.eot');
    src: local('Open Sans Regular'), local('OpenSansRegular'),
        url('fonts/OpenSansRegular.woff2') format('woff2'),
        url('fonts/OpenSansRegular.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'Open Sans';  
    src: url('fonts/OpenSansBold.eot');
    src: local('Open Sans Bold'), local('OpenSansBold'),
        url('fonts/OpenSansBold.woff2') format('woff2'),
        url('fonts/OpenSansBold.woff') format('woff');
    font-weight: bold;
    font-style: normal;
}

@font-face {
    font-family: 'Open Sans';  
    src: url('fonts/OpenSansSemiBold.eot');
    src: local('Open Sans SemiBold'), local('OpenSansSemiBold'),
        url('fonts/OpenSansSemiBold.woff2') format('woff2'),
        url('fonts/OpenSansSemiBold.woff') format('woff');
    font-weight: 600;
    font-style: normal;
}

html {
    box-sizing: border-box;
}

body {
    font-family: 'Open Sans', sans-serif;
    margin: 0;
    background-color: var(--color-wild-sand);
}

*, *::after, *::before {
    box-sizing: inherit;
}

a {
    text-decoration: none;
}

.list-reset {
    margin: 0;
    padding: 0;
    list-style-type: none;
}

.btn-reset {
    margin: 0;
    padding: 0;
    cursor: pointer;
    border: none;
    background-color: transparent;
}

.site-btn {
    color: var(--color-white);
    background-color: var(--color-heliotrope);
}

:root {
    --color-white: #ffffff;
    --color-wild-sand: #f5f5f5;
    --color-grey: #b0b0b0;
    --color-gray-suit: #c8c5d1;
    --color-mine-shaft: #333333;
    --color-heliotrope: #9873ff;
    --color-melrose: #b89eff;
    --color-mischka: #e7e5eb;
    --color-athens-gray: #f4f3f6;
    --color-burnt-sienna: #f06a4d;
}

.container {
    max-width: 1186px;
    margin: 0 auto;
    padding: 0 20px;
}

.site-modal {
    position: absolute;
    overflow-x: auto;
    cursor: pointer;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #00000080; 
    opacity: 0;
}

.site-modal__content {
    max-width: 450px;
    cursor: auto;
    position: absolute;
    padding: 24px 30px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    margin: 0 auto;
    box-shadow: 0px 0px 35px 0px rgba(0, 0, 0, 0.15);
    background-color: var(--color-white);
    opacity: 0;
}

.site-tooltip {
    position: absolute;
    top: -33px;
    left: 50%;
    transform: translateX(-50%);
    padding: 7px 7px;
    /* padding-bottom: 1px; */
    opacity: 0;
    visibility: hidden;
    transition: opacity .3s ease-in-out, visibility .3s ease-in-out;
    background-color: var(--color-mine-shaft);
}

.site-tooltip::before {
    content: '';
    position: absolute;
    width: 10px;
    height: 10px;
    bottom: -9px;
    left: 50%;
    transform: translateX(-50%);
    clip-path: polygon(100% 0, 0 0, 51% 100%);
    background-color: var(--color-mine-shaft);
}
@import './settings.css';
@import './header.css';
@import './clientsSection.css';
@import './modal.css';
@import './contact.css';
@import './clientItem.css';
@import './deleteModal.css';
@import './tooltip.css';
@import './preloader.css';
.contact-tooltip {
    z-index: 3;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    width: auto;
}

.contact-tooltip__type {
    display: block;
    margin-right: 5px;
    color: var(--color-white);
}

.contact-tooltip__value {
    display: block;
    font-weight: bold;
    color: var(--color-melrose);
    text-decoration: underline;
}

.contacts__link:hover .contact-tooltip {
    opacity: 1;
    visibility: visible;
    transition: opacity .3s ease-in-out, transform .3s ease-in-out;
}

.delete-tooltip {
    width: 133px;
    font-weight: bold;
}
import { createClient } from "./clientsAPI.js";
import { createClientItem } from "./createClientItem.js";
import { createClients } from "./createModalForm.js"
import { validateContactForm } from "./validateContact.js";
import { validateClientForm } from "./validateForm.js";

export const addClientModal = () => {
    const createForm = createClients();
    const modal = document.createElement('div');
    const modalContent = document.createElement('div');

    modal.classList.add('modal', 'site-modal', 'modal-active');
    modalContent.classList.add('modal__content', 'site-modal__content', 'modal-active');
    createForm.form.classList.add('add-client');

    modalContent.append(createForm.modalClose, createForm.modalTitle, createForm.form);
    modal.append(modalContent);

    createForm.form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const contactTypes = document.querySelectorAll('.contact__name');
        const contactValues = document.querySelectorAll('.contact__input');
        let contacts = [];
        let clientObj = {};

        if(!validateClientForm()) {
            return;
        }

        for (let i = 0; i < contactTypes.length; i++)  {
            if (!validateContactForm(contactTypes[i], contactValues[i])) {
                return;
            }
            // validateContactForm(contactTypes[i], contactValues[i]);
            contacts.push({
                type: contactTypes[i].innerHTML,
                value: contactValues[i].value,
            });
        };

        clientObj.name = createForm.inputName.value;
        clientObj.surname = createForm.inputSurname.value;
        clientObj.lastName = createForm.inputLastname.value;
        clientObj.contacts = contacts;

        // console.log(clientObj);

        // await sendClientData(clientObj, 'POST');
        // if(validateClientForm()) {
        //     const data = await createClient(clientObj);
        //     document.querySelector('.clients__table').append(createClientItem(data));
        //     document.querySelector('.modal').remove();
        // }

        const spinner = document.querySelector('.modal__spinner');

        try {
            spinner.style.display = "block";
            const data = await createClient(clientObj);
            setTimeout(() => {
                document.querySelector('.clients__table').append(createClientItem(data));
                document.querySelector('.modal').remove();
            }, 1000);
        } catch (error) {
            console.log(error);
        } finally {
            setTimeout(() => {
                spinner.style.display = "none";
            }, 1000);
        }
        
    })

    createForm.modalClose.addEventListener('click', () => {
        modal.remove();
    })

    document.addEventListener('click', (event) => {
        if (event.target == modal) {
            modal.remove();
        }
    });

    return modal;
}
import { changeClient } from "./clientsAPI.js";
import { createClientItem } from "./createClientItem.js";
import { createContactItem } from "./createContact.js";
import { deleteClientModal } from "./createDeleteModal.js";
import { createClients } from "./createModalForm.js";

export const changeClientModal = (data) => {
    const changeModal = document.createElement('div');
    const changeModalContent = document.createElement('div');
    const createForm = createClients();
    const titleId = document.createElement('span');

    changeModal.classList.add('change-modal', 'site-modal', 'modal-active');
    changeModalContent.classList.add('change-modal__content', 'site-modal__content', 'modal-active');
    titleId.classList.add('modal__id');

    titleId.textContent = 'ID: ' + data.id.substr(0, 6);
    createForm.modalTitle.textContent = 'Изменить данные';
    createForm.cancelBtn.textContent = 'Удалить клиента';

    createForm.cancelBtn.addEventListener('click', (e) => {
        e.preventDefault();

        const deleteModal = deleteClientModal();
        document.body.append(deleteModal.deleteModal);

        import('./clientsAPI.js').then(({ deleteClientItem }) => {
            deleteModal.modalBtnDelete.addEventListener('click', () => {
                deleteClientItem(data.id);
                document.getElementById(data.id).remove();
            });
        });
    });

    createForm.modalClose.addEventListener('click', () => {
        changeModal.remove();
    });

    document.addEventListener('click', (e) => {
        if (e.target == changeModal) {
            changeModal.remove();
        }
    });

    createForm.inputSurname.value = data.surname;
    createForm.inputName.value = data.name;
    createForm.inputLastname.value = data.lastName;

    for (const contact of data.contacts) {
        const createContact = createContactItem();

        createContact.contactName.textContent = contact.type;
        createContact.contactInput.value = contact.value;

        createForm.contactsBlock.prepend(createContact.contact);
        createForm.contactsBlock.style.backgroundColor = 'var(--color-athens-gray)';
    }

    if (data.contacts.length === 10) {
        // console.log('data.contacts.length = ', data.contacts.length);
        createForm.addContactBtn.classList.remove('modal__btn-contact--active');
    }

    createForm.form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const contactTypes = document.querySelectorAll('.contact__name');
        const contactValues = document.querySelectorAll('.contact__input');
        let contacts = [];
        let client = {};

        for (let i = 0; i < contactTypes.length; i++) {
            contacts.push({
                type: contactTypes[i].innerHTML,
                value: contactValues[i].value,
            });
        }

        client.name = createForm.inputName.value;
        client.surname = createForm.inputSurname.value;
        client.lastName = createForm.inputLastname.value;
        client.contacts = contacts;

        const spinner = document.querySelector('.modal__spinner');

        try {
            spinner.style.display = "block";
            const changeData = await changeClient(client, data.id);
            setTimeout(() => {
                document.getElementById(changeData.id).remove();
                document.querySelector('.clients__table').append(createClientItem(changeData));
                document.querySelector('.change-modal').remove();
            }, 1000);
        } catch (error) {
            console.log(error);
        } finally {
            setTimeout(() => {
                spinner.style.display = "none";
            }, 1000);
        }
    });

    createForm.modalTitle.append(titleId);
    changeModalContent.append(createForm.modalClose, createForm.modalTitle, createForm.form);
    changeModal.append(changeModalContent);

    return {
        changeModal,
        changeModalContent,
    }
}
export const getClients = async () => {
    const response = await fetch('http://localhost:3000/api/clients', {
        method: 'GET',
    });

    const result = await response.json();
    
    return result;
}

export const createClient = async (client) => {
    const response = await fetch('http://localhost:3000/api/clients', {
        method: 'POST',
        body: JSON.stringify(client),
    });

    const result = await response.json();
    return result;
}

export const changeClient = async (client, id) => {
    const response = await fetch(`http://localhost:3000/api/clients/${id}`, {
        method: 'PATCH',
        body: JSON.stringify(client),
    });
    // console.log(response.json());

    const result = await response.json();
    return result;
}

export const deleteClientItem = async (id) => {
    await fetch(`http://localhost:3000/api/clients/${id}`, { 
        method: 'DELETE',
    });
}
// import { svgArrow } from "./svg.js";
import { addClientModal } from "./addClient.js";
import { createPreloader } from "./preloader.js";
import { svgAddClient } from "./svg.js";

export const createClientsSection = () => {
    const section = document.createElement('section'); //Секция с таблицей клиентов
    const h1 = document.createElement('h1'); //Подпись клиенты
    const container = document.createElement('div'); //Контейнер
    const main = document.createElement('main'); //Содержимое контейнера
    const clientsHead = document.createElement('thead'); //Заголовок таблицы
    const clientsHeadTr = document.createElement('tr'); // Строка заголовка
    const clientsHeadId = document.createElement('td'); //Столбец ID
    const clientsHeadFio = document.createElement('td'); //Столбец ФИО
    const clientsHeadCreateAt = document.createElement('td'); //Столбец дата создания (добавления клиента)
    const clientsHeadUpdateAt = document.createElement('td'); //Столбец даты изменения (данных клиента)
    const clientsHeadContacts = document.createElement('td'); //Столбец контактов
    const clientsHeadActions = document.createElement('td'); //Столбец действий (Изменить/Удалить)
    const clientsHeadSpan = document.createElement('span'); //Сортировка ФИО
    const addClientBtn = document.createElement('btn'); //Кнопка добавления клиента
    const addClientBtnIcon = document.createElement('span'); //Иконка добавления клиента
    const clientsTableWrapper = document.createElement('div'); //Контейнер для таблицы (адаптив)
    const clientsTable = document.createElement('table'); //Таблица клиентов
    const clientsTableBody = document.createElement('tbody'); //Тело таблицы
    const createSpan = document.createElement('span'); //Время создания
    const updateSpan = document.createElement('span'); // Время изменения

    section.classList.add('clients');
    clientsTableWrapper.classList.add('clients__wrapper');
    h1.classList.add('clients__heading');
    clientsTableBody.classList.add('clients__tbody');
    clientsHead.classList.add('clients__thead', 'thead-info');
    clientsHeadId.classList.add('thead-info__item', 'thead-info__item--id', 'sort-up');
    clientsHeadFio.classList.add('thead-info__item', 'thead-info__item--fio', 'sort-down');
    clientsHeadCreateAt.classList.add('thead-info__item', 'thead-info__item--create', 'sort_down');
    clientsHeadUpdateAt.classList.add('thead-info__item', 'thead-info__item--update', 'sort_down');
    clientsHeadContacts.classList.add('thead-info__item', 'thead-info__item--contacts');
    clientsHeadActions.classList.add('thead-info__item', 'thead-info__item--actions');
    clientsHeadSpan.classList.add('thead-info__span');
    addClientBtn.classList.add('clients__btn', 'btn-reset');
    addClientBtnIcon.classList.add('clients__icon');

    container.classList.add('container', 'clients__container');
    main.classList.add('main');
    clientsTable.classList.add('clients__table');
    createSpan.classList.add('create__span');
    updateSpan.classList.add('update__span');
    // updateSpan.classList.add('update__span');

    h1.textContent = 'Клиенты';
    clientsHeadId.textContent = 'ID';
    clientsHeadFio.textContent = 'Фамилия Имя Отчество';
    clientsHeadSpan.textContent = 'А-Я'
    clientsHeadCreateAt.textContent = 'Дата и время';
    clientsHeadUpdateAt.textContent = 'Последние';
    clientsHeadContacts.textContent = 'Контакты';
    clientsHeadActions.textContent = 'Действия';
    addClientBtn.textContent = 'Добавить клиента';
    addClientBtnIcon.innerHTML = svgAddClient;

    addClientBtn.addEventListener('click', () => {
        document.body.append(addClientModal());
    })

    main.append(section);
    section.append(container);
    clientsHeadFio.appendChild(clientsHeadSpan);
    clientsHeadCreateAt.append(createSpan);
    clientsHeadUpdateAt.append(updateSpan);
    clientsHeadTr.append(
        clientsHeadId, 
        clientsHeadFio, 
        clientsHeadCreateAt, 
        clientsHeadUpdateAt, 
        clientsHeadContacts, 
        clientsHeadActions
    );
    clientsHead.append(clientsHeadTr);
    clientsTableWrapper.append(clientsTable);
    clientsTable.append(clientsHead, clientsTableBody, createPreloader());
    // clientsTableBody.append();
    addClientBtn.append(addClientBtnIcon);
    container.append(h1, clientsTableWrapper, addClientBtn);

    return {
        main,
        clientsTable,
        clientsTableBody,
    }
}
import { changeClientModal } from "./changeClient.js";
import { deleteClientModal } from "./createDeleteModal.js";
import { createContactItemType, formatDate, formatTime } from "./format.js";
import { svgSpinner } from "./svg.js";

export const createClientItem = (data) => {
    const clientTr = document.createElement('tr');
    const clientId = document.createElement('span');
    const clientFio = document.createElement('td');
    const clientName = document.createElement('span');
    const clientSurname = document.createElement('span');
    const clientLastname = document.createElement('span');
    const clientCreateAt = document.createElement('td');
    const clientUpdateAt = document.createElement('td');
    const clientCreateDate = document.createElement('span');
    const clientCreateTime = document.createElement('span');
    const clientUpdateDate = document.createElement('span');
    const clientUpdateTime = document.createElement('span');
    const clientContacts = document.createElement('td');
    const clientActions = document.createElement('td');
    const clientActionChange = document.createElement('button');
    const clientActionDelete = document.createElement('button');
    const deleteClient = deleteClientModal();
    const changeClient = changeClientModal(data);
    const changeSpinner = document.createElement('span');
    const deleteSpinner = document.createElement('span');

    clientTr.classList.add('client__item');
    clientTr.id = data.id;
    clientId.classList.add('client__id');
    clientFio.classList.add('client__fio');
    clientName.classList.add('client__name');
    clientSurname.classList.add('client__surname');
    clientLastname.classList.add('client__lastname');
    clientCreateAt.classList.add('client__create');
    clientUpdateAt.classList.add('client__update');
    clientCreateDate.classList.add('create__date');
    clientCreateTime.classList.add('create__time');
    clientUpdateDate.classList.add('update__date');
    clientUpdateTime.classList.add('update__time');
    clientContacts.classList.add('client__contacts');
    clientActions.classList.add('client__actions');
    clientActionChange.classList.add('client__change', 'btn-reset');
    clientActionDelete.classList.add('client__delete', 'btn-reset');
    changeSpinner.classList.add('actions__spinner');
    deleteSpinner.classList.add('actions__spinner');

    for (const contact of data.contacts) {
        createContactItemType(contact.type, contact.value, clientContacts);
    }

    const deleteById = () => {
        import('./clientsAPI.js').then(({ deleteClientItem }) => {
            deleteClient.modalBtnDelete.addEventListener('click', () => {
                try {
                    deleteClient.deleteSpinner.style.display = 'block';
                    setTimeout(() => {
                        deleteClientItem(data.id);
                        document.getElementById(data.id).remove();
                        deleteClient.deleteModal.remove();
                    }, 1000);
                } catch (error) {
                    console.log(error);
                } finally {
                    setTimeout(() => {
                        deleteClient.deleteSpinner.style.display = 'none';
                    }, 1000)
                }
            })
        });
    }

    clientActionDelete.addEventListener('click', () => {
        deleteSpinner.style.display = 'block';
        clientActionDelete.classList.add('action-wait');
        setTimeout(() => {
            deleteById();
            document.body.append(deleteClient.deleteModal);
            deleteSpinner.style.display = 'none';
            clientActionDelete.classList.remove('action-wait');
        }, 1000);
    });

    clientActionChange.addEventListener('click', () => {
        changeSpinner.style.display = 'block';
        clientActionChange.classList.add('action-wait');
        setTimeout(() => {
            document.body.append(changeClient.changeModal);
            changeSpinner.style.display = 'none';
            clientActionChange.classList.remove('action-wait');
        }, 1000);
    })

    clientId.textContent = data.id.substr(0, 6);
    clientName.textContent = data.name;
    clientSurname.textContent = data.surname;
    clientLastname.textContent = data.lastName;
    clientCreateDate.textContent = formatDate(data.createdAt);
    clientCreateTime.textContent = formatTime(data.createdAt);
    clientUpdateDate.textContent = formatDate(data.updatedAt);
    clientUpdateTime.textContent = formatTime(data.updatedAt);
    clientActionChange.textContent = 'Изменить';
    clientActionDelete.textContent = 'Удалить';
    changeSpinner.innerHTML = svgSpinner;
    deleteSpinner.innerHTML = svgSpinner;

    clientActionChange.append(changeSpinner);
    clientActionDelete.append(deleteSpinner);
    clientFio.append(clientSurname, clientName, clientLastname);
    clientCreateAt.append(clientCreateDate, clientCreateTime);
    clientUpdateAt.append(clientUpdateDate, clientUpdateTime);
    clientActions.append(clientActionChange, clientActionDelete);
    clientTr.append(clientId, clientFio, clientCreateAt, clientUpdateAt, clientContacts, clientActions);

    return clientTr;

}
import { svgDelete } from "./svg.js";

export const createContactItem = () => {
    const contact = document.createElement('div');
    const contactType = document.createElement('div');
    const contactName = document.createElement('button');
    const contactList = document.createElement('ul');
    const contactPhone = document.createElement('li');
    const contactEmail = document.createElement('li');
    const contactVk = document.createElement('li');
    const contactFb = document.createElement('li');
    const contactOther = document.createElement('li');
    const contactInput = document.createElement('input');
    const contactBtnDelete = document.createElement('button');
    const contactDeleteSpan = document.createElement('span');

    contact.classList.add('contact');
    contactType.classList.add('contact__type');
    contactName.classList.add('contact__name');
    contactList.classList.add('contact__list', 'list-reset');
    contactPhone.classList.add('contact__item');
    contactEmail.classList.add('contact__item');
    contactVk.classList.add('contact__item');
    contactFb.classList.add('contact__item');
    contactOther.classList.add('contact__item');
    contactInput.classList.add('contact__input');
    contactBtnDelete.classList.add('contact__delete', 'btn-reset');
    contactDeleteSpan.classList.add('contact-tooltip', 'site-tooltip', 'delete-tooltip');

    contactName.textContent = 'Телефон';
    contactPhone.textContent = 'Доп. телефон';
    contactEmail.textContent = 'Email';
    contactDeleteSpan.textContent = 'Удалить контакт';
    contactVk.textContent = 'Vk';
    contactFb.textContent = 'Facebook';
    contactOther.textContent = 'Другое';
    contactInput.placeholder = 'Введите данные контакта';
    contactInput.type = 'text';
    contactBtnDelete.innerHTML = svgDelete;

    contactBtnDelete.addEventListener('click', (e) => {
        e.preventDefault();
        contact.remove();
        document.querySelector('.modal__btn-contact').classList.add('modal__btn-contact--active');
    });

    contactName.addEventListener('click', (e) => {
        e.preventDefault();
        contactList.classList.toggle('contact__list--active');
        contactName.classList.toggle('contact__list--active');
    });

    contactType.addEventListener('mouseleave', () => {
        contactList.classList.remove('contact__list--active');
        contactName.classList.remove('contact__list--active');
    });

    const setType = (type) => {
        type.addEventListener('click', () => {
            contactName.textContent = type.textContent;
            contactList.classList.remove('contact__list--active');
            contactName.classList.remove('contact__list--active');
        });
    };

    const typesArr = [contactPhone, contactEmail, contactVk, contactFb, contactOther];

    for (const type of typesArr) {
        setType(type);        
    }

    contactBtnDelete.append(contactDeleteSpan);
    contact.append(contactType, contactInput, contactBtnDelete);
    contactType.append(contactName, contactList);
    contactList.append(contactPhone, contactEmail, contactVk, contactFb, contactOther);

    return {
        contact,
        contactName,
        contactInput,
        contactBtnDelete,
    }
}
import { svgSpinner } from "./svg.js";

export const deleteClientModal = () => {
    const deleteModalContent = document.createElement('div');
    const modalClose = document.createElement('button');
    const deleteModalTitle = document.createElement('h2');
    const deleteModalText = document.createElement('p');
    const deleteModal =  document.createElement('div');
    const modalBtnDelete = document.createElement('button');
    const modalBtnBack = document.createElement('button');
    const deleteSpinner = document.createElement('span');

    deleteModal.classList.add('delete-modal', 'site-modal', 'modal-active');
    deleteModalContent.classList.add('delete-modal__content', 'site-modal__content', 'modal-active');
    deleteModalTitle.classList.add('delete-modal__title', 'modal__title');
    deleteModalText.classList.add('delete-modal__text');
    modalClose.classList.add('modal__close', 'btn-reset');
    modalBtnBack.classList.add('delete-modal__back', 'btn-reset');
    modalBtnDelete.classList.add('delete-modal__delete', 'btn-reset', 'site-btn');
    deleteSpinner.classList.add('modal__spinner');

    deleteModalTitle.textContent = 'Удалить клиента';
    deleteModalText.textContent = 'Вы действительно хотите удалить данного клиента?';
    modalBtnBack.textContent = 'Отмена';
    modalBtnDelete.textContent = 'Удалить';
    deleteSpinner.innerHTML = svgSpinner;

    modalBtnDelete.append(deleteSpinner);
    deleteModalContent.append(modalClose, deleteModalTitle, deleteModalText, modalBtnDelete, modalBtnBack);
    deleteModal.append(deleteModalContent);

    modalClose.addEventListener('click', () => deleteModal.remove());
    modalBtnBack.addEventListener('click', () => deleteModal.remove());
    // modalBtnDelete.addEventListener('click', () => deleteModal.remove());


    window.addEventListener('click', (e) => {
        if (e.target === deleteModal) {
            deleteModal.remove();
        }
    });



    return {
        deleteModal,
        deleteModalContent,
        modalBtnDelete,
        deleteSpinner,
    };
}
import { createContactItem } from "./createContact.js";
import { svgSpinner, svgAddContactDefault, svgAddContactHover } from "./svg.js";

export const createClients = () => {
    const modalTitle = document.createElement('h2');
    const modalClose = document.createElement('button');
    const form = document.createElement('form');
    const inputSurname = document.createElement('input');
    const inputName = document.createElement('input');
    const inputLastname = document.createElement('input');
    const labelSurname = document.createElement('label');
    const labelName = document.createElement('label');
    const labelLastname = document.createElement('label');
    const spanSurname = document.createElement('span');
    const spanName = document.createElement('span');
    const addContactBtn = document.createElement('button');
    const addContactBtnSvgDefault = document.createElement('span');
    const addContactBtnSvgHover = document.createElement('span');
    const saveBtn = document.createElement('button');
    const cancelBtn = document.createElement('button');
    const contactsBlock = document.createElement('div');
    const formFloatingSurname = document.createElement('div');
    const formFloatingName = document.createElement('div');
    const formFloatingLastname = document.createElement('div');
    const errorBlock = document.createElement('p');
    const unacceptableLetter = document.createElement('span');
    const emptySurname = document.createElement('span');
    const emptyName = document.createElement('span');
    const emptyLastname = document.createElement('span');
    const emptyValue= document.createElement('span');
    const emptyContacts = document.createElement('span');
    const spinner = document.createElement('span');

    spinner.classList.add('modal__spinner');
    modalTitle.classList.add('modal__title');
    modalClose.classList.add('modal__close', 'btn-reset');
    form.classList.add('modal__form');
    formFloatingSurname.classList.add('form-floating');
    formFloatingName.classList.add('form-floating');
    formFloatingLastname.classList.add('form-floating');
    inputSurname.classList.add('modal__input');
    inputName.classList.add('modal__input');
    inputLastname.classList.add('modal__input');
    labelSurname.classList.add('modal__label');
    labelName.classList.add('modal__label');
    labelLastname.classList.add('modal__label');
    spanSurname.classList.add('modal__label');
    spanName.classList.add('modal__label');
    addContactBtn.classList.add('modal__btn-contact', 'modal__btn-contact--active');
    addContactBtnSvgDefault.classList.add('btn-contact__svg', 'btn-contact__svg--default', 'btn-contact__svg--active');
    addContactBtnSvgHover.classList.add('btn-contact__svg', 'btn-contact__svg--hover');
    saveBtn.classList.add('modal__btn-save', 'btn-reset', 'site-btn');
    cancelBtn.classList.add('modal__btn-cancel', 'btn-reset');
    contactsBlock.classList.add('modal__contact');

    labelSurname.for = 'floatingSurname';
    labelName.for = 'floatingName';
    labelLastname.for = 'floatingLastname';

    inputSurname.id = 'floatingSurname';
    inputName.id = 'floatingName';
    inputLastname.id = 'floatingLastname';
    errorBlock.classList.add('modal__error');
    unacceptableLetter.id = 'unacceptableLetter';
    emptySurname.id = 'emptySurname';
    emptyName.id = 'emptyName';
    emptyLastname.id = 'emptyLastname';
    emptyValue.id = 'emptyValue';
    emptyContacts.id = 'emptyContacts';

    inputSurname.type = 'text'; 
    inputName.type = 'text'; 
    inputLastname.type = 'text';

    inputSurname.placeholder = 'Фамилия';
    inputName.placeholder = 'Имя';
    inputLastname.placeholder = 'Отчество';

    modalTitle.textContent = 'Новый клиент';
    labelSurname.textContent = 'Фамилия';
    labelName.textContent = 'Имя';
    labelLastname.textContent = 'Отчество';
    addContactBtn.textContent = 'Добавить контакт';
    saveBtn.textContent = 'Сохранить';
    cancelBtn.textContent = 'Отмена';
    spanName.textContent = '*';
    spanSurname.textContent = '*';

    spinner.innerHTML = svgSpinner;
    addContactBtnSvgDefault.innerHTML = svgAddContactDefault;
    addContactBtnSvgHover.innerHTML = svgAddContactHover;

    saveBtn.append(spinner);
    labelSurname.append(spanSurname);
    labelName.append(spanName);
    formFloatingName.append(inputName, labelName);
    formFloatingSurname.append(inputSurname, labelSurname);
    formFloatingLastname.append(inputLastname, labelLastname);
    contactsBlock.append(addContactBtn);
    errorBlock.append(emptySurname, emptyName, emptyLastname, emptyValue, unacceptableLetter, emptyContacts);
    form.append(formFloatingSurname, formFloatingName, formFloatingLastname, contactsBlock, errorBlock, saveBtn, cancelBtn);
    addContactBtn.append(addContactBtnSvgDefault, addContactBtnSvgHover);

    addContactBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const contactsItems = document.getElementsByClassName('contact');

        if (contactsItems.length < 9) {
            const contactItem = createContactItem();
            contactsBlock.prepend(contactItem.contact);
            contactsBlock.style.backgroundColor = 'rgba(200, 197, 209, .2)';
            if (contactsItems.length >= 8) {
                document.querySelector('.site-modal__content').style.top = '60%';
            } else {
                document.querySelector('.site-modal__content').style.top = '50%';
            }
        } else {
            const contactItem = createContactItem();
            contactsBlock.prepend(contactItem.contact);
            addContactBtn.classList.remove('modal__btn-contact--active');
        }
    })

    addContactBtn.addEventListener('mousemove', () => {
        addContactBtnSvgDefault.classList.remove('btn-contact__svg--active'); /*btn-contact__svg--default */
        addContactBtnSvgHover.classList.add('btn-contact__svg--active'); /* btn-contact__svg--hover */
    });

    addContactBtn.addEventListener('mouseleave', () => {
        addContactBtnSvgDefault.classList.add('btn-contact__svg--active'); /*btn-contact__svg--default */
        addContactBtnSvgHover.classList.remove('btn-contact__svg--active'); /* btn-contact__svg--hover */
    });

    return {
        form,
        modalClose,
        modalTitle,
        cancelBtn,
        inputName,
        inputSurname,
        inputLastname,
        labelName,
        labelSurname,
        labelLastname,
        contactsBlock,
        addContactBtn,
    }
}
export const contactTooltip = (type, value) => {
    const tooltip = document.createElement('div');
    const tooltipType = document.createElement('span');
    const tooltipValue = document.createElement('a');

    tooltip.classList.add('contact-tooltip', 'site-tooltip');
    tooltipType.classList.add('contact-tooltip__type');
    tooltipValue.classList.add('contact-tooltip__value');
    
    if (type === 'Телефон' || type === 'Доп. телефон') {
        tooltipType.style.display = 'none';
    } else {
        tooltipType.textContent = `${type}:`;
    }
    tooltipValue.textContent = value;

    tooltip.append(tooltipType, tooltipValue);

    return {
        tooltip,
        tooltipType,
        tooltipValue,
    }
}
import { contactTooltip } from "./createTooltip.js";
import { svgEmail, svgFb, svgOther, svgPhone, svgVk } from "./svg.js";

export const formatDate = (data) => {
    const newDate = new Date(data);
    const convertDate = {
        year: 'numeric',
        month: 'numeric',
        day: 'numeric',
    }

    const result = newDate.toLocaleString('ru', convertDate);

    return result;
}

export const formatTime = (data) => {
    const newTime = new Date(data);
    const convertTime = {
        hour: 'numeric',
        minute: 'numeric',
    }

    const result = newTime.toLocaleString('ru', convertTime);

    return result;
}

export const createContactLink = (type, value, element, svg, item) => {
    const setTooltip = contactTooltip(type, value);
    element = document.createElement('a');
    element.classList.add('contacts__link');
    element.innerHTML = svg;

    if (type === 'Email') {
        element.href = `mailto:${value.trim()}`;
    } else if (type === 'Телефон' || type === 'Доп. телефон') {
        element.href = `tel:${value.trim()}`;
        setTooltip.tooltipValue.style.color = 'var(--color-white)';
        setTooltip.tooltipValue.style.textDecoration = 'none';
    } else {
        element.href = value.trim();
    }

    element.append(setTooltip.tooltip);
    item.append(element);
}

export const createContactItemType = (type, value, item) => {
    switch (type) {
        case 'Телефон': 
            let phone;
            createContactLink(type, value, phone, svgPhone, item);
            break;
        case 'Доп. телефон': 
            let elcPhone;
            createContactLink(type, value, elcPhone, svgPhone, item);
            break;
        case 'Email':
            let Email;
            createContactLink(type, value, Email, svgEmail, item);
            break;
        case 'Vk':
            let Vk;
            createContactLink(type, value, Vk, svgVk, item);
            break;
        case 'Facebook':
            let Fb;
            createContactLink(type, value, Fb, svgFb, item);
            break;
        case 'Другое':
            let Other;
            createContactLink(type, value, Other, svgOther, item);
            break;
        
        default:
            break;
    }
}

export const createClientsHeader = () => {
    const header = document.createElement('header');
    const logo = document.createElement('a');
    const logoImg = document.createElement('img');
    const form = document.createElement('form');
    const input = document.createElement('input');
    const container = document.createElement('div');
    const wrapper = document.createElement('div');
    const inner = document.createElement('div');

    header.classList.add('header');
    container.classList.add('container', 'header__container');
    logo.classList.add('logo', 'header__logo');
    logoImg.classList.add('logo__img');
    logoImg.src = 'css/img/logo.svg';
    logoImg.alt = 'Логотип';
    form.classList.add('header__form');
    input.classList.add('header__input');
    wrapper.classList.add('header__wrapper');
    inner.classList.add('header__inner');
    input.placeholder = 'Введите запрос';

    header.append(container);
    logo.append(logoImg);
    form.append(input);
    container.append(logo, form);

    return header;
}
import { createClientsHeader } from "./header.js"
import { createClientsSection } from "./clientsSection.js";
import { getClients } from "./clientsAPI.js";
import { createClientItem } from "./createClientItem.js";

const createApp = async () => {
    const header = createClientsHeader();
    const clientsSection = createClientsSection();
    document.body.append(header, clientsSection.main);
    const preloader = document.querySelector('.preloader');

    try {
        const clients = await getClients();
        for (const client of clients) {
            document.querySelector('.clients__tbody').append(createClientItem(client));
        }
    } catch (error) {
        console.log(error);
    } finally {
        setTimeout(() => preloader.remove(), 1000) ;
    }
}

createApp();
import { svgPreloaderMain } from "./svg.js";

export const createPreloader = () => {
    const preloaderBlock = document.createElement('div');
    const preloaderCircle = document.createElement('span');

    preloaderBlock.classList.add('preloader');
    preloaderCircle.id = 'loader';

    preloaderCircle.innerHTML = svgPreloaderMain;

    preloaderBlock.append(preloaderCircle);

    return preloaderBlock;
};
export const svgAddClient = `<svg width="23" height="16" viewBox="0 0 23 16" xmlns="http://www.w3.org/2000/svg">
<path d="M14.5 8C16.71 8 18.5 6.21 18.5 4C18.5 1.79 16.71 0 14.5 0C12.29 0 10.5 1.79 10.5 4C10.5 6.21 12.29 8 14.5 8ZM5.5 6V3H3.5V6H0.5V8H3.5V11H5.5V8H8.5V6H5.5ZM14.5 10C11.83 10 6.5 11.34 6.5 14V16H22.5V14C22.5 11.34 17.17 10 14.5 10Z"/>
</svg>
`;

export const svgAddContactDefault = `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_124_2)">
<path d="M7.99998 4.66683C7.63331 4.66683 7.33331 4.96683 7.33331 5.3335V7.3335H5.33331C4.96665 7.3335 4.66665 7.6335 4.66665 8.00016C4.66665 8.36683 4.96665 8.66683 5.33331 8.66683H7.33331V10.6668C7.33331 11.0335 7.63331 11.3335 7.99998 11.3335C8.36665 11.3335 8.66665 11.0335 8.66665 10.6668V8.66683H10.6666C11.0333 8.66683 11.3333 8.36683 11.3333 8.00016C11.3333 7.6335 11.0333 7.3335 10.6666 7.3335H8.66665V5.3335C8.66665 4.96683 8.36665 4.66683 7.99998 4.66683ZM7.99998 1.3335C4.31998 1.3335 1.33331 4.32016 1.33331 8.00016C1.33331 11.6802 4.31998 14.6668 7.99998 14.6668C11.68 14.6668 14.6666 11.6802 14.6666 8.00016C14.6666 4.32016 11.68 1.3335 7.99998 1.3335ZM7.99998 13.3335C5.05998 13.3335 2.66665 10.9402 2.66665 8.00016C2.66665 5.06016 5.05998 2.66683 7.99998 2.66683C10.94 2.66683 13.3333 5.06016 13.3333 8.00016C13.3333 10.9402 10.94 13.3335 7.99998 13.3335Z" fill="#9873FF"/>
</g>
<defs>
<clipPath id="clip0_124_2">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
`
export const svgAddContactHover = `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_124_14)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M1.33331 8.00016C1.33331 4.32016 4.31998 1.3335 7.99998 1.3335C11.68 1.3335 14.6666 4.32016 14.6666 8.00016C14.6666 11.6802 11.68 14.6668 7.99998 14.6668C4.31998 14.6668 1.33331 11.6802 1.33331 8.00016ZM7.33329 5.33366C7.33329 4.96699 7.63329 4.66699 7.99996 4.66699C8.36663 4.66699 8.66663 4.96699 8.66663 5.33366V7.33366H10.6666C11.0333 7.33366 11.3333 7.63366 11.3333 8.00033C11.3333 8.36699 11.0333 8.66699 10.6666 8.66699H8.66663V10.667C8.66663 11.0337 8.36663 11.3337 7.99996 11.3337C7.63329 11.3337 7.33329 11.0337 7.33329 10.667V8.66699H5.33329C4.96663 8.66699 4.66663 8.36699 4.66663 8.00033C4.66663 7.63366 4.96663 7.33366 5.33329 7.33366H7.33329V5.33366Z" fill="#9873FF"/>
</g>
<defs>
<clipPath id="clip0_124_14">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
`

export const svgDelete = `<svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_121_1083)">
<path d="M8 2C4.682 2 2 4.682 2 8C2 11.318 4.682 14 8 14C11.318 14 14 11.318 14 8C14 4.682 11.318 2 8 2ZM8 12.8C5.354 12.8 3.2 10.646 3.2 8C3.2 5.354 5.354 3.2 8 3.2C10.646 3.2 12.8 5.354 12.8 8C12.8 10.646 10.646 12.8 8 12.8ZM10.154 5L8 7.154L5.846 5L5 5.846L7.154 8L5 10.154L5.846 11L8 8.846L10.154 11L11 10.154L8.846 8L11 5.846L10.154 5Z" />
</g>
<defs>
<clipPath id="clip0_121_1083">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
`

export const svgVk = `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.7">
<path d="M8 0C3.58187 0 0 3.58171 0 8C0 12.4183 3.58187 16 8 16C12.4181 16 16 12.4183 16 8C16 3.58171 12.4181 0 8 0ZM12.058 8.86523C12.4309 9.22942 12.8254 9.57217 13.1601 9.97402C13.3084 10.1518 13.4482 10.3356 13.5546 10.5423C13.7065 10.8371 13.5693 11.1604 13.3055 11.1779L11.6665 11.1776C11.2432 11.2126 10.9064 11.0419 10.6224 10.7525C10.3957 10.5219 10.1853 10.2755 9.96698 10.037C9.87777 9.93915 9.78382 9.847 9.67186 9.77449C9.44843 9.62914 9.2543 9.67366 9.1263 9.90707C8.99585 10.1446 8.96606 10.4078 8.95362 10.6721C8.93577 11.0586 8.81923 11.1596 8.43147 11.1777C7.60291 11.2165 6.81674 11.0908 6.08606 10.6731C5.44147 10.3047 4.94257 9.78463 4.50783 9.19587C3.66126 8.04812 3.01291 6.78842 2.43036 5.49254C2.29925 5.2007 2.39517 5.04454 2.71714 5.03849C3.25205 5.02817 3.78697 5.02948 4.32188 5.03799C4.53958 5.04143 4.68362 5.166 4.76726 5.37142C5.05633 6.08262 5.4107 6.75928 5.85477 7.38684C5.97311 7.55396 6.09391 7.72059 6.26594 7.83861C6.45582 7.9689 6.60051 7.92585 6.69005 7.71388C6.74734 7.57917 6.77205 7.43513 6.78449 7.29076C6.82705 6.79628 6.83212 6.30195 6.75847 5.80943C6.71263 5.50122 6.53929 5.30218 6.23206 5.24391C6.07558 5.21428 6.0985 5.15634 6.17461 5.06697C6.3067 4.91245 6.43045 4.81686 6.67777 4.81686L8.52951 4.81653C8.82136 4.87382 8.88683 5.00477 8.92645 5.29874L8.92808 7.35656C8.92464 7.47032 8.98521 7.80751 9.18948 7.88198C9.35317 7.936 9.4612 7.80473 9.55908 7.70112C10.0032 7.22987 10.3195 6.67368 10.6029 6.09801C10.7279 5.84413 10.8358 5.58142 10.9406 5.31822C11.0185 5.1236 11.1396 5.02785 11.3593 5.03112L13.1424 5.03325C13.195 5.03325 13.2483 5.03374 13.3004 5.04274C13.6009 5.09414 13.6832 5.22345 13.5903 5.5166C13.4439 5.97721 13.1596 6.36088 12.8817 6.74553C12.5838 7.15736 12.2661 7.55478 11.9711 7.96841C11.7001 8.34652 11.7215 8.53688 12.058 8.86523Z" fill="#9873FF"/>
</svg>
`

export const svgFb = `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.7">
<path d="M7.99999 0C3.6 0 0 3.60643 0 8.04819C0 12.0643 2.928 15.3976 6.75199 16V10.3775H4.71999V8.04819H6.75199V6.27309C6.75199 4.25703 7.94399 3.14859 9.77599 3.14859C10.648 3.14859 11.56 3.30121 11.56 3.30121V5.28514H10.552C9.55999 5.28514 9.24799 5.90362 9.24799 6.53815V8.04819H11.472L11.112 10.3775H9.24799V16C11.1331 15.7011 12.8497 14.7354 14.0879 13.2772C15.3261 11.819 16.0043 9.96437 16 8.04819C16 3.60643 12.4 0 7.99999 0Z" fill="#9873FF"/>
</g>
</svg>
`

export const svgPhone = `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.7">
<circle cx="8" cy="8" r="8" fill="#9873FF"/>
<path d="M11.56 9.50222C11.0133 9.50222 10.4844 9.41333 9.99111 9.25333C9.83556 9.2 9.66222 9.24 9.54222 9.36L8.84444 10.2356C7.58667 9.63556 6.40889 8.50222 5.78222 7.2L6.64889 6.46222C6.76889 6.33778 6.80444 6.16444 6.75556 6.00889C6.59111 5.51556 6.50667 4.98667 6.50667 4.44C6.50667 4.2 6.30667 4 6.06667 4H4.52889C4.28889 4 4 4.10667 4 4.44C4 8.56889 7.43556 12 11.56 12C11.8756 12 12 11.72 12 11.4756V9.94222C12 9.70222 11.8 9.50222 11.56 9.50222Z" fill="white"/>
</g>
</svg>
`

export const svgEmail = `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.7">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16ZM4 5.75C4 5.3375 4.36 5 4.8 5H11.2C11.64 5 12 5.3375 12 5.75V10.25C12 10.6625 11.64 11 11.2 11H4.8C4.36 11 4 10.6625 4 10.25V5.75ZM8.424 8.1275L11.04 6.59375C11.14 6.53375 11.2 6.4325 11.2 6.32375C11.2 6.0725 10.908 5.9225 10.68 6.05375L8 7.625L5.32 6.05375C5.092 5.9225 4.8 6.0725 4.8 6.32375C4.8 6.4325 4.86 6.53375 4.96 6.59375L7.576 8.1275C7.836 8.28125 8.164 8.28125 8.424 8.1275Z" fill="#9873FF"/>
</svg>
`

export const svgOther = `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g opacity="0.7">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16ZM3 8C3 5.24 5.24 3 8 3C10.76 3 13 5.24 13 8C13 10.76 10.76 13 8 13C5.24 13 3 10.76 3 8ZM9.5 6C9.5 5.17 8.83 4.5 8 4.5C7.17 4.5 6.5 5.17 6.5 6C6.5 6.83 7.17 7.5 8 7.5C8.83 7.5 9.5 6.83 9.5 6ZM5 9.99C5.645 10.96 6.75 11.6 8 11.6C9.25 11.6 10.355 10.96 11 9.99C10.985 8.995 8.995 8.45 8 8.45C7 8.45 5.015 8.995 5 9.99Z" fill="#9873FF"/>
</svg>
`

export const svgPreloaderMain = `<svg class="circle-inner" viewBox="0 0 40 40">
<circle class="front" cx="17" cy="17" r="15"></circle>
</svg>
`

export const svgSpinner = `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_224_2787)">
<path d="M3.00008 8.04008C3.00008 10.8236 5.2566 13.0801 8.04008 13.0801C10.8236 13.0801 13.0801 10.8236 13.0801 8.04008C13.0801 5.2566 10.8236 3.00008 8.04008 3.00008C7.38922 3.00008 6.7672 3.12342 6.196 3.34812" stroke-width="2" stroke-miterlimit="10" stroke-linecap="round"/>
</g>
<defs>
<clipPath id="clip0_224_2787">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
`
export const validateContactForm = (type, value) => {
    const emptyValue = document.getElementById('emptySurname');
    const onlyNumbers = /[^0-9]+$/g;
    const onlyEnglish = /[^a-zA-Z|@|.]+$/g;

    const onInputValue = (input) => {
        input.addEventListener('input', () => {
            input.style.borderColor = 'var(--color-gray-suit)';
            emptyValue.textContent = '';
        });

        input.oncut = input.oncopy = input.onpast = () => {
            input.style.borderColor = 'var(--color-gray-suit)';
            emptyValue.textContent = '';
        }
    }

    const showError = (message, block, input) => {
        block.textContent = message;
        input.style.borderColor = 'var(--color-burnt-sienna)';
    }

    onInputValue(value);

    if(!value.value) {
        showError('Не заполнены поля контактов', emptyValue, value);
        return false;
    }

    switch (type.innerHTML) {
        case 'Телефон':
            if (onlyNumbers.test(value.value)) {
                showError('Допустимы только цифры', emptyValue, value);
                return false;
            } else if (value.value.length !== 11) {
                showError('Телефон должен содержать 11 цифр', emptyValue, value);
                return false;
            }
            return true;
        case 'Доп. телефон':
            if (onlyNumbers.test(value.value)) {
                showError('Допустимы только цифры', emptyValue, value);
                return false;
            } else if (value.value.length !== 11) {
                showError('Телефон должен содержать 11 цифр', emptyValue, value);
                return false;
            }
            return true;
        case 'Email':
            if (onlyEnglish.test(value.value)) {
                showError('Email может содержать только буквы латинского алфавита, цифры, "@", "."', emptyValue, value);
                return false;
            }
            return true;
        default:
            return true;
    }
}
export const validateClientForm = () => {
    const clientSurname = document.getElementById('floatingSurname');
    const clientName = document.getElementById('floatingName');
    const clientLastname = document.getElementById('floatingLastname');
    const unacceptableLetter = document.getElementById('unacceptableLetter');
    const emptySurname = document.getElementById('emptySurname');
    const emptyName = document.getElementById('emptyName');
    const emptyLastname = document.getElementById('emptyLastname');
    const emptyValue = document.getElementById('emptyValue');
    // const emptyContacts = document.getElementById('emptyContacts');
    const validateArr = [unacceptableLetter, emptySurname, emptyName, emptyLastname, emptyValue];
    const language = /[^а-яА-ЯёЁ]+$/g;

    const onInputValue = (input) => {
        input.addEventListener('input', () => {
            input.style.borderColor = 'var(--color-gray-suit)';
            for (const item of validateArr) {
                item.textContent = '';
            }
        });

        input.oncut = input.oncopy = input.onpast = () => {
            input.style.borderColor = 'var(--color-gray-suit)';
            for (const item of validateArr) {
                item.textContent = '';
            }
        }

        input.onchange = () => {
            input.style.borderColor = 'var(--color-gray-suit)';

            if (clientSurname.value && clientName.value && clientLastname.value) {
                for (const item of validateArr) {
                    item.textContent = '';
                }
            }
        }
    }

    onInputValue(clientSurname);
    onInputValue(clientName);
    onInputValue(clientLastname);

    const checkEmptyName = (input, message, name) => {
        if (!input.value) {
            input.style.borderColor = 'var(--color-burnt-sienna)';
            message.textContent = `Введите ${name} клиента`;
            return false;
        } else {
            message.textContent = '';
        }

        return true;
    }

    const checkByLanguage = (input, language) => {
        if (language.test(input.value)) {
            input.style.borderColor = 'var(--color-burnt-sienna)';
            unacceptableLetter.textContent = `Недопустимые символы`;
            return false;
        }

        return true;
    }

    if (!checkEmptyName(clientSurname, emptySurname, 'фамилию')) {
        return false;
    }

    if (!checkEmptyName(clientName, emptyName, 'имя')) {
        return false;
    }

    // if (!checkEmptyName(clientLastname, emptyLastname, 'отчество')) {
    //     return false;
    // }

    if (!checkByLanguage(clientSurname, language)) {
        return false;
    }

    if (!checkByLanguage(clientName, language)) {
        return false;
    }

    if (!checkByLanguage(clientLastname, language)) {
        return false;
    }

    return true;
}